(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'add_new_organization'"
p3
sS'layer'
p4
S'/home/tls-sanjeet/Desktop/HRMS/web2py/applications/themishrms/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\r\n\r\n#########################################################################\r\n## This scaffolding model makes your app work on Google App Engine too\r\n## File is released under public domain and you can use without limitations\r\n#########################################################################\r\n\r\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\r\n## be redirected to HTTPS, uncomment the line below:\r\n# request.requires_https()\r\n\r\nif not request.env.web2py_runtime_gae:\r\n    ## if NOT running on Google App Engine use SQLite or other DB\r\n    db = DAL('sqlite://storage.sqlite')\r\nelse:\r\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\r\n    db = DAL('google:datastore')\r\n    ## store sessions and tickets there\r\n    session.connect(request, response, db = db)\r\n    ## or store session in Memcache, Redis, etc.\r\n    ## from gluon.contrib.memdb import MEMDB\r\n    ## from google.appengine.api.memcache import Client\r\n    ## session.connect(request, response, db = MEMDB(Client()))\r\n\r\n## by default give a view/generic.extension to all actions from localhost\r\n## none otherwise. a pattern can be 'controller/function.extension'\r\nresponse.generic_patterns = ['*'] if request.is_local else []\r\n## (optional) optimize handling of static files\r\n# response.optimize_css = 'concat,minify,inline'\r\n# response.optimize_js = 'concat,minify,inline'\r\n\r\n#########################################################################\r\n## Here is sample code if you need for\r\n## - email capabilities\r\n## - authentication (registration, login, logout, ... )\r\n## - authorization (role based authorization)\r\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\r\n## - old style crud actions\r\n## (more options discussed in gluon/tools.py)\r\n#########################################################################\nimport os\nfilepath = os.path.join(request.folder,'uploads')\r\n\r\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\r\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\r\ncrud, service, plugins = Crud(db), Service(), PluginManager()\r\n\r\n## create all tables needed by auth if not custom tables\n\ndef get_org_name(c):\n\trow = db(db.add_new_organization.id == c).select(db.add_new_organization.organization_name).first()\n\treturn row.organization_name\n\ndef get_dpt_name(c):\n\trow = db(db.add_new_department.id == c).select(db.add_new_department.department).first()\n\treturn row.department\n\nauth.settings.extra_fields['auth_user']= [\n\tField('organization_name',db.add_new_organization, represent=lambda c, row:get_org_name(c), requires = IS_IN_DB(db,'add_new_organization.id','%(organization_name)s')),\n\tField('location', 'string', requires=IS_NOT_EMPTY(error_message='Location name cannot be empty')),\n\tField('department',db.add_new_department, represent=lambda c, row:get_dpt_name(c), requires = IS_IN_DB(db,'add_new_department.id','%(department)s')),\n\tField('employee_code', 'string', unique=True, requires=IS_NOT_EMPTY(error_message='Employee code cannot be empty')),\n\tField('personal_email', requires=IS_EMAIL(error_message='Invalid personal email-id')),\n\tField('date_of_joining', 'date', requires=IS_NOT_EMPTY(error_message='Please enter the date of joining of the employee')),\n\tField('reporting_manager', 'string', requires=IS_NOT_EMPTY(error_message='Please enter the Reporting Manager name')),\n\tField('designation', 'string', requires=IS_NOT_EMPTY(error_message='Please enter the employee Designation')),\n\tField('employee_status', requires=IS_IN_SET(['Active','Terminated','Resigned','Leave-of-Absence','Deceased'],error_message='Please select the Employee Status')),\n\tField('date_of_exit', 'date'),\n\tField('exit_remark', 'text')\n  ]\n\r\nauth.define_tables()\n\r\n## configure email\r\nmail=auth.settings.mailer\r\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\r\nmail.settings.sender = 'you@gmail.com'\r\nmail.settings.login = 'username:password'\r\n\r\n## configure auth policy\nauth.settings.login_onaccept = lambda form: lgin(form)\nauth.settings.logout_onlogout = lambda usr: lgout(usr)\nauth.settings.actions_disabled.append('register')\nauth.settings.actions_disabled.append('profile')\r\nauth.settings.registration_requires_verification = False\r\nauth.settings.registration_requires_approval = False\r\nauth.settings.reset_password_requires_verification = True\r\n\r\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\r\n## register with janrain.com, write your domain:api_key in private/janrain.key\r\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\r\nuse_janrain(auth,filename='private/janrain.key')\r\n\r\n#########################################################################\r\n## Define your tables below (or better in another model file) for example\r\n##\r\n## >>> db.define_table('mytable',Field('myfield','string'))\r\n##\r\n## Fields can be 'string','text','password','integer','double','boolean'\r\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\r\n## There is an implicit 'id integer autoincrement' field\r\n## Consult manual for more options, validators, etc.\r\n##\r\n## More API examples for controllers:\r\n##\r\n## >>> db.mytable.insert(myfield='value')\r\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\r\n## >>> for row in rows: print row.id, row.myfield\r\n#########################################################################\n\n\ndef get_loc_name(c):\n\trow = db(db.add_new_organization.id == c).select(db.add_new_organization.location).first()\n\treturn row.location\n\t\ndef get_project_name(c):\n\trow = db(db.project.id == c).select(db.project.project_name).first()\n\treturn row.project_name\n\ndef get_emp_name(c):\n\trow = db(db.auth_user.id == c).select(db.auth_user.email).first()\n\treturn row.email\n\ndef get_rptmgr_name(c):\n\trow = db(db.auth_user.id == c).select(db.auth_user.reporting_manager).first()\n\treturn row.reporting_manager\n\t\ndef get_promgr_name(c):\n\trow = db(db.auth_user.id == c).select(db.auth_user.email).first()\n\treturn row.email\t\n\ndb.define_table('add_new_organization',\n\t\t\t\tField('organization_name','string',requires=IS_NOT_EMPTY(error_message='Please enter the Organization Name')),\n\t\t\t\tField('organization_prefix','string',requires=IS_NOT_EMPTY(error_message='Please enter the Organization Prefix')))\n\t\t\t\t\t\t\t\ndb.define_table('add_new_location',\n\t\t\t\tField('organization_name',db.add_new_organization, represent=lambda c, row:get_org_name(c), requires = IS_IN_DB(db,'add_new_organization.id','%(organization_name)s')),\n\t\t\t\tField('location','string',requires=IS_NOT_EMPTY(error_message='Please add the Organization Location')),\n\t\t\t\tField('phone','integer',requires=IS_LENGTH(10)),\n\t\t\t\tField('address','text'))\n\t\t\t\t\ndb.define_table('add_new_department',\n\t\t\t\tField('department','string',requires=IS_NOT_EMPTY(error_message='Please add the Department Name')),\n\t\t\t\tField('description','string',requires=IS_NOT_EMPTY(error_message='Please add the Description of the Department Name')))\n\t\t\t\t\ndb.define_table('practice_area',\n\t\t\t\tField('department',db.add_new_department, represent=lambda c, row:get_dpt_name(c), requires = IS_IN_DB(db,'add_new_department.id','%(department)s')),\n\t\t\t\tField('practice_area'))\n\t\ndb.define_table('employee_login_detail',\r\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('employee_email'),\r\n\t\t\t\tField('employee_name'),\r\n\t\t\t\tField('employee_login_date'),\n\t\t\t\tField('employee_login_time'),\r\n\t\t\t\tField('employee_logout_date',default='Logged in'), \r\n\t\t\t\tField('employee_logout_time',default='Logged in'),\r\n\t\t\t\tField('total_minutes',default='Logged in'),\n\t\t\t\tField('toal_hours',default='Logged in'),\n\t\t\t\tField('ip_address'))\r\n\ndb.define_table('personal_information',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('date_of_birth','date',requires=IS_NOT_EMPTY(error_message = 'Please Choose your date of birth')),\n\t\t\t\tField('gender',requires=IS_IN_SET(['Male','Female'], error_message='Please Select your Gender')),\n\t\t\t\tField('marital_status',requires=IS_IN_SET(['Maried','Unmaried'], error_message='Please Select your Marital Status')),\n\t\t\t\tField('blood_group',requires=IS_NOT_EMPTY(error_message='Please enter your blood group')),\n\t\t\t\tField('mobile','integer',requires=IS_LENGTH(10)),\n\t\t\t\tField('phone','integer',requires=IS_LENGTH(11)),\n\t\t\t\tField('present_address','text'),\n\t\t\t\tField('permanent_address','text'),\n\t\t\t\tField('citizenship'),\n\t\t\t\tField('state',requires=IS_IN_SET(['Andhra Pradesh','Arunachal Pradesh','Assam','Andaman and Nicobar Islands','Bihar','Chandigarh','Chhattisgarh','Dadar and Nagar Haveli','Daman and Diu','Delhi','Goa','Gujarat','Haryana','Himachal Pradesh','Jammu and Kashmir','Jharkhand','Karnataka','Kerala','Lakshadeep','Madhya Pradesh','Maharashtra','Manipur','Meghalaya','Mizoram','Nagaland','Orissa','Pondicherry','Punjab','Rajasthan','Sikkim','Tamil Nadu','Tripura','Uttaranchal','Uttar Pradesh','West Bengal'], error_message='Please Select your State')),\n\t\t\t\tField('passport_no'),\n\t\t\t\tField('bank_account_no','integer'),\n\t\t\t\tField('pan_card_no'))\n\t\t\t\t\ndb.define_table('qualification',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('university',requires=IS_NOT_EMPTY(error_message='Please enter the University Name')),\n\t\t\t\tField('name_of_course',requires=IS_NOT_EMPTY(error_message='Please enter the Name of Course')),\n\t\t\t\tField('specification'),\n\t\t\t\tField('grade',requires=IS_NOT_EMPTY(error_message='Please enter grade')),\n\t\t\t\tField('percentage',requires=IS_NOT_EMPTY(error_message='Please enter Percentage')),\n\t\t\t\tField('completion_year','date',requires=IS_NOT_EMPTY(error_message='Please enter Completion Year')))\n\t\t\t\t\ndb.define_table('document',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('document_description',requires=IS_NOT_EMPTY(error_message='Please enter the description for the Document')),\n\t\t\t\tField('document_upload','upload',uploadfolder=filepath,autodelete=True,requires=[IS_LENGTH(maxsize=1024*20480,error_message='Please Upload the file less than 20 MB'),IS_NOT_EMPTY(error_message='Please Choose the document for upload')]))\n\t\t\t\t\ndb.define_table('image',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('image','upload',uploadfolder=filepath,autodelete=True,requires=[IS_LENGTH(maxsize=1024*1024,error_message='Please Upload the file less than 1 MB'),IS_IMAGE(extensions=('jpeg','png'),error_message='Please Upload only the jpeg and png files')]))\n\t\t\t\t\ndb.define_table('holiday_list',\n\t\t\t\tField('holiday_date','date',requires=IS_NOT_EMPTY(error_message='Please enter the Holiday date')),\n\t\t\t\tField('holiday_name',requires=IS_NOT_EMPTY(error_message='Please enter the Holiday Name')),\n\t\t\t\tField('remarks','text'))\n\t\t\t\t\ndb.define_table('apply_leave',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('name'),\n\t\t\t\tField('leave_type',requires=IS_IN_SET(['Casual Leave','Medical Leave','Vacation Leave'], error_message='Please Select Leave type')),\n\t\t\t\tField('from_leave','date'),\n\t\t\t\tField('to_leave','date'),\n\t\t\t\tField('total_day','integer'),\n\t\t\t\tField('reason_for_leave','text'),\n\t\t\t\tField('reporting_manager'),\n\t\t\t\tField('approved_by'),\n\t\t\t\tField('status',requires=IS_IN_SET(('Approved','Pending','Rejected')),default='Pending'))\n\t\t\t\t\ndb.define_table('employee_leave',\n\t\t\t\tField('employee_code'),\n\t\t\t\tField('email'),\n\t\t\t\tField('taken_vacation_leave','integer'),\n\t\t\t\tField('taken_medical_leave','integer'),\n\t\t\t\tField('taken_casual_leave','integer'),\n\t\t\t\tField('left_vacation_leave','integer'),\n\t\t\t\tField('left_medical_leave','integer'),\n\t\t\t\tField('left_casual_leave','integer'))\n\ndb.define_table('project',\n\t\t\t\tField('project_name',unique=True,requires=IS_NOT_EMPTY(error_message='Please add the Project Name')),\n\t\t\t\tField('client_name',requires=IS_NOT_EMPTY(error_message='Please add the Client Name')),\n\t\t\t\tField('company_name',requires=IS_NOT_EMPTY(error_message='Please enter the Company Name')),\n\t\t\t\tField('company_email',requires=IS_EMAIL(error_message='Please enter the company email')),\n\t\t\t\tField('practice_head',db.auth_user, represent=lambda c, row:get_rptmgr_name(c), requires = IS_IN_DB(db,'auth_user.id','%(reporting_manager)s')),\n\t\t\t\tField('project_manager',db.auth_user, represent=lambda c, row:get_promgr_name(c), requires = IS_IN_DB(db,'auth_user.id','%(email)s')))\n\ndb.define_table('activity',\n\t\t\t\tField('project_name',db.project, represent=lambda c, row:get_project_name(c), requires = IS_IN_DB(db,'project.id','%(project_name)s')),\n\t\t\t\tField('activity'))\n\ndb.define_table('assign_project',\n\t\t\t\tField('project_name'), \n\t\t\t\tField('organization_name'),\n\t\t\t\tField('department'),\n\t\t\t\tField('employee'))\n\t\t\t\t\n\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/tls-sanjeet/Desktop/HRMS/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/tls-sanjeet/Desktop/HRMS/web2py/applications/themishrms/models/db.py", line 59, in <module>\n    Field(\'organization_name\',db.add_new_organization, represent=lambda c, row:get_org_name(c), requires = IS_IN_DB(db,\'add_new_organization.id\',\'%(organization_name)s\')),\n  File "/home/tls-sanjeet/Desktop/HRMS/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/home/tls-sanjeet/Desktop/HRMS/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'add_new_organization\'\n'
p11
s.